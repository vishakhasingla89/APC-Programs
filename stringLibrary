#include<stdio.h>
#include<stdlib.h>
int count_split=0;
char *ref=NULL;
//finding length of a string.
int strlen1(char *s)
{
    int i=0;
    while(s[i]!='\0')
    {
        i++;
    }
    return i;
}

//overwriting m by the content of n.
void strcpy1(char *m,char *n)
{
    int i=0;
    while(n[i]!='\0')
    {
        m[i]=n[i];
        i++;
    }
    m[i]='\0';
}

//concatinating n into m.
char* strcat1(char *m,char *n)
{
    int s1=strlen1(m);
    int s2=strlen1(n);
  // m=(char*)realloc(m,sizeof(char)*(s1+s2-1));
    int i=s1,j=0;
    while(n[j]!='\0')
    {
        m[i]=n[j];
        i++;
        j++;
    }
    m[i]='\0';
    return m;
}

//reversing a string.
char* strrev1(char *s)
{
    int len=strlen1(s);
    int i;
    char temp;
    for(i=0;i<len/2;i++)
    {
        temp=s[i];
        s[i]=s[len-i-1];
        s[len-i-1]=temp;
    }
    return s;
}

//comparing two strings.
int strcmp1(char *m,char *n)
{
   // int len1=strlen(m);
    //int len2=strlen(n);
    int i=0,j=0;
    while((m[i]!='\0')&&(n[j]!='\0'))
    {
        if(m[i]==n[j])
        {
            i++;
            j++;
        }
        else
        return m[i]-n[j];
    }
    if((m[i]=='\0')&&(n[j]=='\0'))
    return 0;
    else if(m[i]=='\0')
    return -1;
    else if(n[j]=='\0')
    return 1;
}

//searching a pattern in complexity: O(m*n)
char* strstr1(char *str,char *s)
{
    int l=strlen1(s);
    if(l==0)
    return str;
    int len=strlen1(str);
    int i,j;
    for(i=0;i<=len-l;i++)
    {
        j=0;
        while(s[j]!='\0')
        {
            if(str[i+j]==s[j])
            j++;
            else
            break;
        }
        if(j==l)
        return &str[i];
    }
    return NULL;
}

//strstr using kmp
char* strstr2(char *str,char *s)
{
    if(strlen1(s)==0)
    return str;
    int lps[strlen1(s)];
    lps[0]=0;
    int i=0,j;
    for(j=1;j<strlen1(s);)
    {
        if(s[i]==s[j])
        {
            lps[j]=i+1;
            i++;
            j++;
        }
        else if(i==0)
        {
            lps[j]=0;
            j++;
        }
        else
        i=lps[i-1];
    }
    j=0;
    for(i=0;i<strlen1(str);)
    {
        if(str[i]==s[j])
        {
            i++;
            j++;
        }
        else if(j==0)
        {
            i++;
        }
        else
        j=lps[j-1];
        if(j==strlen1(s))
        break;
    }
    if(j==strlen1(s))
    return str+i-j;
    else
    return NULL;
}

//finding a character
char* strchr1(char *s,int c)
{
    int i=0;
    while(s[i]!='\0')
    {
        if(s[i]==c)
        return &s[i];
        i++;
    }
    return NULL;
}

//splitting a string s st delimiter d.the function returns an array of pointers.
char** split(char *s,char *d)
{
    char **res=(char**)malloc(sizeof(char*));
    int start=0,end=0;
    while(1)
    {
        while((s[end]!='\0')&&(s[end]!=d[0]))
        {
            end++;
        }
        res[count_split++]=s+start;
        if(s[end]=='\0')
        break;
        s[end]='\0';
        start=end+1;
        end=start;
    }
    return res;
}

char* strtok(char *s,char *d)
{
    
    if(s!=NULL)
    ref=s;
    int end=0;
    if(*(ref+end)=='\0')
    return NULL;
    while((*(ref+end)!='\0') && (*(ref+end)!=d[0]))
    {
        end++;
    }
    *(ref+end)='\0';
    char *res=ref;
    ref=ref+end+1;
    return res;
}

//driver program for testing.
int main() {
   /* char a[11],b[6];
    scanf("%s",a);
    scanf("%s",b);
    int len=strlen1(a);
   printf("%d",len);
   strcpy1(a,b);
   printf("%s",a);
   // a[4]='a';
   // a[5]='\0';
    strcat1(a,b);
    printf("%s",a);
    strrev1(b);
    printf("%s",b);
    printf("\n");
    printf("%d",strcmp1("helloasdfgsbjh","hello"));
 */   char *res=strstr2("Hello","el");
   
    printf("\n%s",res);
    /*char *chr=strchr1("hello",'l');
    printf("\n%s",chr);*/
    char arr[]="abc-def-xyz-uvw";
    /*char **split_str=split(arr,"-");
    int i;
    printf("\n");
    for(i=0;i<count_split;i++)
    printf("%s\n",split_str[i]);*/
    char *tok=strtok(arr,"-");
    while(tok!=NULL)
    {
        printf("\n%s",tok);
        tok=strtok(NULL,"-");
    }
    
    
}
