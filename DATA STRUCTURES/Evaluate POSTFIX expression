#include<stdio.h>
#include<stdlib.h>
typedef struct stack
{
    char data;
    struct stack *next;
}Stack;
typedef struct stack1
{
    int data;
    struct stack1 *next;
}Stack_num;

void push(Stack **head,char c)
{
    Stack *newnode=(Stack*)malloc(sizeof(Stack));
    if(newnode==NULL)
    printf("Sorry,The stack is full!");
    else
    {
        newnode->data=c;
        newnode->next=*head;
        *head=newnode;
    }
}
void push_num(Stack_num **head,int c)
{
    Stack_num *newnode=(Stack_num*)malloc(sizeof(Stack_num));
    if(newnode==NULL)
    printf("Sorry,The stack is full!");
    else
    {
        newnode->data=c;
        newnode->next=*head;
        *head=newnode;
    }
}
_Bool isEmpty(Stack *head)
{
    if(head==NULL)
    return 1;
    else
    return 0;
}
char peek(Stack *head)
{
    return head->data;
}
char pop(Stack **head)
{
    Stack *temp=*head;
    char t=temp->data;
    *head=temp->next;
    free(temp);
    temp=NULL;
    return t;
}
int pop_num(Stack_num **head)
{
    Stack_num *temp=*head;
    int t=temp->data;
    *head=temp->next;
    free(temp);
    temp=NULL;
    return t;
}
_Bool precedence(char a,char b)
{
    if(( (a=='*')||(a=='/') )&&( (b=='+')||(b=='-')||(b=='(') ))
    return 1;
    else if(( (a=='+')||(a=='-') )&&( b=='(' ))
    return 1;
    else
    return 0;
}
int evaluate_exp(char s[])
{
    
    int i=0;
    char res[20];
    int j=0;
    Stack *h1=NULL;
    while(s[i]!='\0')
    {
        if(((s[i]>=65)&&(s[i]<=90))||((s[i]>=97)&&(s[i]<=123)))
        {
            res[j]=s[i];
            j++;
        }
        else if(s[i]=='(')
        {
            push(&h1,s[i]);
        }
        else if( (s[i]=='+') || (s[i]=='-') || (s[i]=='*') || (s[i]=='/') )
        {
            if(isEmpty(h1))
            push(&h1,s[i]);
            else if (precedence(s[i],peek(h1))) 
            push(&h1,s[i]);
            else
            {
                while( (!(isEmpty(h1))) && (!(precedence(s[i],peek(h1)))) )
                {
                    res[j]=pop(&h1);
                    j++;
                }
                push(&h1,s[i]);
            }
        }
        else if(s[i]==')')
        {
            
            while( (!(isEmpty(h1))) && (peek(h1)!='(') )
            {
                res[j]=pop(&h1);
                j++;
            }
            pop(&h1);
        }
        i++;
    }
    res[j]='\0';
    printf("postfix expression is : %s",res);
    
   Stack_num *h2=NULL;
   j=0;
   int ans;
   while(res[j]!='\0')
   {
       if(((res[j]>=65)&&(res[j]<=90))||((res[j]>=97)&&(res[j]<=123)))
       {
          // printf("enter the value of %c",s[i]);
           int num;
           scanf("%d",&num);
           push_num(&h2,num);
       }
       else if((res[j]=='+')||(res[j]=='-')||(res[j]=='*')||(res[j]=='/'))
       {
           int a=pop_num(&h2);
           int b=pop_num(&h2);
           
         
           switch(res[j])
           {
               case '+':
               ans=b+a;
               break;
               case '-':
               ans=b-a;
               break;
               case '*':
               ans=b*a;
               break;
               case '/':
               ans=b/a;
               break;
               
           }
           push_num(&h2,ans);
       }
       j++;
   }
   ans=pop_num(&h2);
    return ans;
}

int main() {
    char s[20];
    scanf("%s",s);

    int res=evaluate_exp(s);
    printf("\nanswer is %d",res);
    
    
}
